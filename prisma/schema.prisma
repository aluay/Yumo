datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  post            Post[]
  likedPosts      Post[]            @relation("UserLikes")
  comments        Comment[]
  likedComments   Comment[]         @relation("CommentLikes")
  bookmarkedPosts Post[]            @relation("UserBookmarks")
  Activity        Activity[]
  createdAt       DateTime          @default(now())
  ActivityMention ActivityMention[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id           Int              @id @default(autoincrement())
  title        String
  description  String?
  code         String
  content      Json? // TipTap editor schema
  language     String
  tags         String[]
  difficulty   DifficultyLevel?
  dependencies String[]
  status       PostStatus       @default(PUBLISHED)
  likes        Int              @default(0)
  likedBy      User[]           @relation("UserLikes")
  views        Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  bookmarkedBy User[]           @relation("UserBookmarks")

  authorId Int?
  author   User?      @relation(fields: [authorId], references: [id])
  Comment  Comment[]
  Activity Activity[]
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  parentId Int?

  replies Comment[] @relation("CommentReplies")
  likedBy User[]    @relation("CommentLikes")
}

model Activity {
  id             Int               @id @default(autoincrement())
  user           User              @relation(fields: [userId], references: [id])
  post           Post?             @relation(fields: [targetId], references: [id], onDelete: Cascade)
  userId         Int
  type           ActivityType
  targetId       Int
  message        String?
  mentionedUsers ActivityMention[]
  createdAt      DateTime          @default(now())
}

model ActivityMention {
  id         Int @id @default(autoincrement())
  activityId Int
  userId     Int

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([activityId, userId]) // avoid duplicate mentions
}

enum ActivityType {
  POST_CREATED
  POST_LIKED
  POST_BOOKMARKED
  COMMENT_POSTED
  COMMENT_LIKED
}
